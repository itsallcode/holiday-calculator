plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'org.sonarqube' version '5.1.0.4882'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "com.github.ben-manes.versions" version '0.51.0'
}

group 'org.itsallcode'
version = '0.2.1'

def getJavaVersion = {
  return project.hasProperty('javaVersion') ? project.getProperty('javaVersion') : 17
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(getJavaVersion())
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    failOnError = true
    options.addBooleanOption('html5', true)
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all'
    options.encoding = 'UTF-8'
}

test {
    if(logger.infoEnabled) {
        testLogging.showStandardStreams = true
    }
    jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-enableassertions'
    useJUnitPlatform()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.13'
}

ext {
    junitVersion = '5.10.3'
    mockitoVersion = '5.12.0'
    lockbackVersion = '1.5.6'
}

testing {
    suites {
        test {
            useJUnitJupiter(junitVersion)
            dependencies {
                implementation "nl.jqno.equalsverifier:equalsverifier:3.16.1"
                implementation "com.jparams:to-string-verifier:1.4.8"
                implementation 'org.assertj:assertj-core:3.26.0'
                implementation "org.mockito:mockito-core:$mockitoVersion"
                implementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
                implementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
                runtimeOnly "ch.qos.logback:logback-classic:$lockbackVersion"
            }
        }
    }
}

license {
    header = file('gradle/license-header.txt')
    ext.project = 'holiday-calculator'
    ext.year = 2022
    ext.name = 'itsallcode'
    ext.email = 'github@kuhnke.net'
    include '**/*.java'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonar {
  properties {
    property("sonar.organization", "itsallcode")
    property("sonar.host.url", "https://sonarcloud.io")
  }
}

rootProject.tasks["sonarqube"].dependsOn(tasks["jacocoTestReport"])

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Holiday Calculator'
                description = 'Java library for calculating public holidays'
                url = 'https://github.com/itsallcode/holiday-calculator'

                licenses {
                    license {
                        name = 'GNU General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'ckunki'
                        name = 'Christoph'
                        email = 'github@kuhnke.net'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/itsallcode/holiday-calculator.git'
                    developerConnection = 'scm:git:https://github.com/itsallcode/holiday-calculator.git'
                    url = 'https://github.com/itsallcode/holiday-calculator'
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

nexusPublishing {
    packageGroup = project.group
    repositories {
        sonatype {
            stagingProfileId = "546ea6ce74787e"
        }
    }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  gradleReleaseChannel = "current"
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}
